import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'icecreamParlor' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     *  1. INTEGER m
     *  2. INTEGER_ARRAY arr
     */

    public static List<Integer> icecreamParlor(int m, List<Integer> arr) {
        List<Integer> combo = new ArrayList<>();

        for (int i = 0; i < arr.size(); i++) {
            int budget1 = m - arr.get(i);

            for (int j = i + 1; j < arr.size(); j++) {
                int budget2 = budget1 - arr.get(j);

                if (budget2 >= 0) {
                    for (int k = j + 1; k < arr.size(); k++) {
                        if (arr.get(k) == budget2) {
                            combo.add(i + 1);
                            combo.add(j + 1);
                            combo.add(k + 1);
                            return combo;
                        }
                    }
                }
            }
        }
        return combo;
    }
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                int m = Integer.parseInt(bufferedReader.readLine().trim());

                int n = Integer.parseInt(bufferedReader.readLine().trim());

                List<Integer> arr = Stream.of(bufferedReader.readLine().replaceAll("\\s+$", "").split(" "))
                        .map(Integer::parseInt)
                        .collect(Collectors.toList());

                List<Integer> result = Result.icecreamParlor(m, arr);

                System.out.println(
                    result.stream()
                        .map(Object::toString)
                        .collect(Collectors.joining(" "))
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
    }
}
